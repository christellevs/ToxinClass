# -*- coding: utf-8 -*-
"""data_analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13mL2Z_344bPsTwTJml1vy_BY3ANp59J1

# **Post Processing Data Analysis**

# **0. Setup**
"""

# mount Google drive
from google.colab import drive

drive.mount('/content/drive')

# -----------------------------------------------------------------------------
# IMPORTS
import csv
import io
import itertools as ite
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import pickle
import os.path
import random
import re
import seaborn as sns
import sklearn
import statistics

RANDOM_SEED = 273
random.seed(RANDOM_SEED)

# Change below to path of source code folder
PATH_TO_FOLDER = '/content/drive/My Drive/UoS/Year3/COM3001/Submission/source_code'

# FILEPATHS
# -----------------------------------------------------------------------------

# processed data
f_train_proteins_list = PATH_TO_FOLDER + '/pre_processing_files/lists/train_proteins_list.pickle'

f_train_complete = PATH_TO_FOLDER + '/pre_processing_files/dataframes/train_complete.pickle'
f_train_atchley_means = PATH_TO_FOLDER + '/pre_processing_files/dataframes/train_atchley_mean.pickle'

f_train_atchley_raw = PATH_TO_FOLDER + '/pre_processing_files/dataframes/train_atchley_raw.pickle'
f_train_atchley_diff = PATH_TO_FOLDER + '/pre_processing_files/dataframes/train_atchley_diff.pickle'
f_train_atchley_combined = PATH_TO_FOLDER + '/pre_processing_files/dataframes/train_atchley_combined.pickle'


# PROTEIN PROCESSING FUNCTIONS START
# -----------------------------------------------------------------------------

# PROTEIN CLASS
class ProteinSequence:
    def __init__(self, identifier, toxic, length, sequence):
        self.identifier = identifier
        self.toxic = toxic
        self.length = length
        self.sequence = sequence
        self.seq_dict_raw = {}
        self.seq_dict_diff = {}
        self.matrix_raw = np.zeros((5, length))
        self.matrix_diff = np.zeros((5, length))

    def to_dict_raw(self):
        return {'identifier': self.identifier,
                'toxic': self.toxic,
                'length': self.length,
                'sequence': self.sequence,
                'f1_raw': self.matrix_raw[0],
                'f2_raw': self.matrix_raw[1],
                'f3_raw': self.matrix_raw[2],
                'f4_raw': self.matrix_raw[3],
                'f5_raw': self.matrix_raw[4],
                'atchley_raw_avg': np.average(self.matrix_raw, axis=0)}

    def to_dict_diff(self):
        return {'identifier': self.identifier,
                'toxic': self.toxic,
                'length': self.length,
                'sequence': self.sequence,
                'f1_diff': self.matrix_diff[0],
                'f2_diff': self.matrix_diff[1],
                'f3_diff': self.matrix_diff[2],
                'f4_diff': self.matrix_diff[3],
                'f5_diff': self.matrix_diff[4],
                'atchley_diff_avg': np.average(self.matrix_diff, axis=0)}

    def to_dict_combined(self):
        return {'identifier': self.identifier,
                'toxic': self.toxic,
                'length': self.length,
                'sequence': self.sequence,
                'matrix_raw': self.matrix_raw,
                'matrix_diff': self.seq_dict_diff,
                'f1_raw': self.matrix_raw[0],
                'f2_raw': self.matrix_raw[1],
                'f3_raw': self.matrix_raw[2],
                'f4_raw': self.matrix_raw[3],
                'f5_raw': self.matrix_raw[4],
                'atchley_raw_avg': np.average(self.matrix_raw, axis=0),
                'f1_diff': self.matrix_diff[0],
                'f2_diff': self.matrix_diff[1],
                'f3_diff': self.matrix_diff[2],
                'f4_diff': self.matrix_diff[3],
                'f5_diff': self.matrix_diff[4],
                'atchley_diff_avg': np.average(self.matrix_diff, axis=0)}


# COMMON FUNCTIONS START
# -----------------------------------------------------------------------------

# for writing and reading data to/from a binary file
def pickle_method(fname, method, context):
    if method == 'wb':
        return pickle.dump(context, open(fname, method))
    elif method == 'rb':
        return pickle.load(open(fname, method))


# SUMMARY FUNCTIONS
def describe_df(df, decimal):
    return df.describe().T[['mean', 'std', 'max', 'min', '25%', '50%', '75%']].round(decimals=decimal)


"""# **1. Atchley Value Analysis**"""

df_combined = pickle_method(f_train_atchley_combined, 'rb', '')
df_combined.head(5)

df_toxic = df_combined.loc[df_combined['toxic'] == 1]
df_toxic.head(5)

df_atoxic = df_combined.loc[df_combined['toxic'] == 0]
df_atoxic.head(5)


# get avgs of columns with arrays, returns arrays same size
def get_average(df, column):
    return np.average(df[column], axis=0)


def get_atchley_avgs(df, labels):
    return dict((el, get_average(df, el)) for el in labels)


raw_labels = ['f1_raw', 'f2_raw', 'f3_raw', 'f4_raw', 'f5_raw', 'atchley_raw_avg']
diff_labels = ['f1_diff', 'f2_diff', 'f3_diff', 'f4_diff', 'f5_diff', 'atchley_diff_avg']

df_toxic_raw = pd.DataFrame.from_dict(get_atchley_avgs(df_toxic, raw_labels))
df_toxic_diff = pd.DataFrame.from_dict(get_atchley_avgs(df_toxic, diff_labels))
df_atoxic_raw = pd.DataFrame.from_dict(get_atchley_avgs(df_atoxic, raw_labels))
df_atoxic_diff = pd.DataFrame.from_dict(get_atchley_avgs(df_atoxic, diff_labels))

# print test
print('Toxic raw\n', df_toxic_raw.head(5))
print('\nToxic change\n', df_toxic_diff.head(5))
print('\nAtoxic raw\n', df_atoxic_raw.head(5))
print('\nAtoxic change\n', df_atoxic_diff.head(5))

# DF LIST
df_list = [df_toxic_raw, df_toxic_diff, df_atoxic_raw, df_atoxic_diff]

# BOXPLOTS
BOXPLOT_XDIM = 20
BOXPLOT_YDIM = 10

titles_boxplot = ['Distribution of Atchley Values of a Toxic Protein Sequence',
                  'Distribution of Change in Atchley Values of a Toxic Protein Sequence',
                  'Distribution of Atchley Values of an Atoxic Protein Sequence',
                  'Distribution of Change in Atchley Values of an Atoxic Protein Sequence']


# plots boxplots
def plot_boxplot(df, title, idx1, idx2):
    print('\n')
    sns.set(style='whitegrid')
    fig = plt.subplots(figsize=(BOXPLOT_XDIM, BOXPLOT_YDIM))
    ax = sns.boxplot(data=df[df.columns[idx1:idx2].tolist()], palette='Set2', orient='h')
    ax.set_title(title, fontsize=26)
    ax.set_xlabel('Atchley Feature', fontsize=16)
    ax.set_ylabel('Atchley Value', fontsize=16)
    # print(df['length'].describe().T[['mean', 'std', 'max','min', '25%', '50%', '75%']].round(decimals=2))


# plots all boxplots
def plot_all_boxplots(df_list, titles, idx1, idx2):
    plot_boxplot(df_list[0], titles[0], idx1, idx2)
    plot_boxplot(df_list[1], titles[1], idx1, idx2)
    plot_boxplot(df_list[2], titles[2], idx1, idx2)
    plot_boxplot(df_list[3], titles[3], idx1, idx2)


# plotting all boxplots
plot_all_boxplots(df_list, titles_boxplot, 0, (-1))

"""**Plotting Atchley Values**"""

# PLOTTING ATCHLEY VALUES FUNCTIONS
# -----------------------------------------------------------------------------

# ATCHLEY PLOT VARIABLES
plot_raw_labels = ['f1-Polarity', 'f2-Secondary Structure', 'f3-Molecular Volume', 'f4-Relative Composition',
                   'f5-Electrostatic Charge', 'Average']
plot_diff_labels = ['f1-Change in Polarity', 'f2-Change in Secondary Structure', 'f3-Change in Molecular Volume',
                    'f4-Change in Relative Composition', 'f5-Change Electrostatic Charge', 'Average Change']
titles_linplot = ['Atchley Values of a Toxic Protein Sequence', 'Change in Atchley Values of a Toxic Protein Sequence',
                  'Atchley Values of an Atoxic Protein Sequence',
                  'Change in Atchley Values of an Atoxic Protein Sequence']


def plot_atchley_values(df, title, labels, xdim, ydim):
    sns.set()
    fig = plt.subplots(figsize=(xdim, ydim))
    sns.set(style='whitegrid')
    plt.ylim(top=3)
    plt.ylim(bottom=-3)
    plt.plot(df)
    plt.legend(labels, loc='upper right', title='Atchley Value')
    plt.ylabel('Atchley Value')
    plt.xlabel('Amino Acid Position in Sequence')
    plt.title(title, fontsize=22)
    plt.show()
    print('\n')


def plot_all_atchley_values(titles, labels_raw, labels_diff, xdim, ydim):
    plot_atchley_values(df_toxic_raw, titles[0], labels_raw, xdim, ydim)
    plot_atchley_values(df_toxic_diff, titles[1], labels_raw, xdim, ydim)
    plot_atchley_values(df_atoxic_raw, titles[2], labels_diff, xdim, ydim)
    plot_atchley_values(df_atoxic_diff, titles[3], labels_diff, xdim, ydim)


# plotting atchley values
plot_all_atchley_values(titles_linplot, plot_raw_labels, plot_diff_labels, 20, 10)

