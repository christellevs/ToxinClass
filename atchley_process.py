# -*- coding: utf-8 -*-
"""atchley.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EVQaSoOJ3gF9DiEpjtMMx4u18XGbjXWk

# **Atchley Transcribing**



---
"""

# -----------------------------------------------------------------------------
# IMPORTS

import csv
import io
import itertools as ite
import matplotlib.pyplot as plt
import numpy as np
import os.path
import pandas as pd
import re
import seaborn as sns

from collections import OrderedDict
from textwrap import wrap

# FILEPATHS
# -----------------------------------------------------------------------------
# INPUT files

# helper files
in_amino_acid = '/content/drive/My Drive/UoS/Year3/COM3001/Data/amino_acid_codes.csv'
ip_atchley = '/content/drive/My Drive/UoS/Year3/COM3001/Data/atchley.csv'

# data files
ip_train_toxic = '/content/drive/My Drive/UoS/Year3/COM3001/Data/dataframes/train_toxic.csv'
ip_train_atoxic = '/content/drive/My Drive/UoS/Year3/COM3001/Data/dataframes/train_atoxic.csv'

# -----------------------------------------------------------------------------
# OUTPUT files

# TOXIC
op_toxic_atchley_complete = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/toxic_atchley_complete.csv'
op_toxic_f1 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/toxic_f1.csv'
op_toxic_f2 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/toxic_f2.csv'
op_toxic_f3 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/toxic_f3.csv'
op_toxic_f4 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/toxic_f4.csv'
op_toxic_f5 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/toxic_f5.csv'

# ATOXIC
op_atoxic_atchley_complete = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/atoxic_atchley_complete.csv'
op_atoxic_f1 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/atoxic_f1.csv'
op_atoxic_f2 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/atoxic_f2.csv'
op_atoxic_f3 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/atoxic_f3.csv'
op_atoxic_f4 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/atoxic_f4.csv'
op_atoxic_f5 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/atoxic_f5.csv'

# FUNCTIONS START
# -----------------------------------------------------------------------------

# GENERAL
def df_to_csv(df, outpath, sep):
  return df.to_csv(outpath, sep, encoding='utf-8')

def split_seq(sequence):
  return [char for char in sequence]

# create empty col
def create_column(df, col_name, value):
  df[col_name] = value

# iterate values and turn into array
def dict_vals_to_array(dictionary):
  for key1, val1 in dictionary.items():
    values = []
    for val2 in val1.values():
      values.append(float(val2))
    dictionary[key1] = values


# CONVERTING TO ATCHLEY
# function that swaps letters for atchley array
def assign_atchley(df, column, empty_val, dictionary):
  for seq_dict in df[column]:
    for letter_key, val_array in seq_dict.items():
      if dictionary.get(letter_key) == None:
        val_array = [empty_val]*5
      else:
        val_array = dictionary[letter_key]
      seq_dict[letter_key] = val_array


# returns a single atchley feature as list
def get_single_feature_list(letter_list, feature_idx):
  feature_list = []
  for letter in letter_list:
    if dict_atchley.get(letter) == None:
      feature_list.append(np.nan)
    else:
      feature_list.append(float(dict_atchley[letter][feature_idx]))
  return feature_list

# returns a dictionary of lists of all atchley features
def get_atchley_features_dict(letter_list):
  dict_keys = ['f1', 'f2', 'f3', 'f4', 'f5']
  feature_dict = dict.fromkeys(dict_keys)
  for idx, (key, value) in enumerate(feature_dict.items()):
    feature_dict[key] = get_single_feature_list(letter_list, idx)
  return feature_dict


# CHANGE IN ATCHLEY
# get change in values
# returns a list
def get_single_list_change(letter_list):
  letter_list.insert(0, 0)
  return ['%.3f' % i for i in (np.diff(letter_list))]

# gets differences for all atchley features
# returns dictionary
def get_atchley_attributes_change(features_dict):
  changes_dict = dict.fromkeys(features_dict)
  for idx, (key, value) in enumerate(features_dict.items()):
    changes_dict[key] = get_single_list_change(value)
    value.pop(0)
  return changes_dict

# COMMON ATCHLEY
# function to get all dictionary of lists of atchley features
def create_atchley_dicts(df, seq_col, new_col, function):
  df[new_col] = 0
  df[new_col] = df[new_col].astype('object')
  for idx, row in df.iterrows():
    df.at[idx, new_col] = function(df.at[idx, seq_col])

df_atchley = pd.read_csv(ip_atchley, index_col=0, encoding='utf-8')
df_atchley.rename(columns={'amino.acid': 'amino_acid'}, inplace=True)
df_atchley.set_index('amino_acid', inplace=True)
for col in df_atchley['f1': 'f5']:
  df_atchley[col] = df_atchley[col].apply(lambda x: re.sub(r'[^\x00-\x7F]+','-', x)).astype(float)
df_atchley

# turning atchley dataframe into dict
dict_atchley = df_atchley.to_dict('index')
dict_vals_to_array(dict_atchley)
dict_atchley

# loading training data
df_train_toxic = pd.read_csv(ip_train_toxic, index_col=0)
df_train_atoxic = pd.read_csv(ip_train_atoxic, index_col=0)

# print test
print(df_train_toxic.head())
print(df_train_atoxic.head())

# converting toxic sequences into list
df_train_toxic['sequence'] = df_train_toxic['sequence'].apply(lambda x: split_seq(x))
df_train_toxic

# converting atoxic sequences into list
df_train_atoxic['sequence'] = df_train_atoxic['sequence'].apply(lambda x: split_seq(x))
df_train_atoxic

"""# **Toxic Data**


---
"""

# describing toxic
print(df_train_toxic.describe().T[['mean', 'std', 'max','min', '25%', '75%']])
print('\n')
print('Total toxic training sequences: ', len(df_train_toxic))

# data distribution
d1_dims = (20, 14)
sns.set(style='whitegrid')
fig_d1 = plt.subplots(figsize=d1_dims)
d1=np.asarray(df_train_toxic[['sequence_length']].values.tolist()).ravel()
ax_d1 = sns.distplot(df_train_toxic['sequence_length'],
                     bins=62, kde=True,
                     kde_kws={"color": "k", "lw": 2, "label": "KDE"},
                     color='seagreen')
ax_d1.set_title('Distribution of toxic protein sequences lengths', fontsize=30)
ax_d1.set_xlabel('Sequence Length', fontsize=16)
ax_d1.set_ylabel('Proportion', fontsize=16)

"""**Adding Atchley conversions to toxic dataframe**"""

# adding atchley dicts to toxic dataframe
create_atchley_dicts(df_train_toxic, 'sequence', 'atchley_values', get_atchley_features_dict)
create_atchley_dicts(df_train_toxic, 'atchley_values', 'atchley_change', get_atchley_attributes_change)
df_train_toxic

test_doct = df_train_toxic['atchley_values'].iloc[0]
test_doct2 = df_train_toxic['atchley_change'].iloc[0]

test_list = test_doct.get('f1')
test_list2 = test_doct2.get('f1')
print(test_list)
print(len(test_list))

print(test_list2)
print(len(test_list2))

"""# **Atoxic Data**

---
"""

# describing atoxic
print(df_train_atoxic.describe().T[['mean', 'std', 'max','min', '25%', '75%']])
print('\n')
print('Total atoxic training sequences: ', len(df_train_atoxic))

d2_dims = (20, 14)
sns.set(style='whitegrid')
fig_d2 = plt.subplots(figsize=d2_dims)
d2 = np.asarray(df_train_atoxic[['sequence_length']].values.tolist()).ravel()
ax_d2 = sns.distplot(df_train_atoxic['sequence_length'],
                     bins=100, kde=True,
                     kde_kws={"color": "k", "lw": 2, "label": "KDE"},
                     color='seagreen')
ax_d1.set_title('Distribution of atoxic protein sequences lengths', fontsize=30)
ax_d1.set_xlabel('Sequence Length', fontsize=16)
ax_d1.set_ylabel('Proportion', fontsize=16)

"""**Adding Atchley conversions to toxic dataframe**"""

# adding atchley dicts to toxic dataframe
create_atchley_dicts(df_train_atoxic, 'sequence', 'atchley_values', get_atchley_features_dict)
create_atchley_dicts(df_train_atoxic, 'atchley_values', 'atchley_change', get_atchley_attributes_change)
df_train_atoxic

df_to_csv(df_train_atoxic, op_atoxic_atchley_complete, ',')

test_doct = df_train_atoxic['atchley_values'].iloc[0]
test_doct2 = df_train_atoxic['atchley_change'].iloc[0]

test_list = test_doct.get('f1')
test_list2 = test_doct2.get('f1')


print(test_list)
print(len(test_list))

print(test_list2)
print(len(test_list2))