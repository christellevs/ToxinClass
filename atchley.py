# -*- coding: utf-8 -*-
"""atchley.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EVQaSoOJ3gF9DiEpjtMMx4u18XGbjXWk

# **Atchley Transcribing**



---
"""

# -----------------------------------------------------------------------------
# IMPORTS

import csv
import io
import itertools as ite
import matplotlib.pyplot as plt
import numpy as np
import os.path
import pandas as pd
import re
import seaborn as sns

from collections import OrderedDict
from textwrap import wrap

# FILEPATHS
# -----------------------------------------------------------------------------
# INPUT files

# helper files
in_amino_acid = '/content/drive/My Drive/UoS/Year3/COM3001/Data/amino_acid_codes.csv'
ip_atchley = '/content/drive/My Drive/UoS/Year3/COM3001/Data/atchley.csv'

# data files
ip_train_toxic = '/content/drive/My Drive/UoS/Year3/COM3001/Data/dataframes/train_toxic.csv'
ip_train_atoxic = '/content/drive/My Drive/UoS/Year3/COM3001/Data/dataframes/train_atoxic.csv'

# -----------------------------------------------------------------------------
# OUTPUT files

# TOXIC
op_toxic_f1 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/toxic_f1.csv'
op_toxic_f2 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/toxic_f2.csv'
op_toxic_f3 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/toxic_f3.csv'
op_toxic_f4 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/toxic_f4.csv'
op_toxic_f5 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/toxic_f5.csv'

# ATOXIC
op_atoxic_f1 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/atoxic_f1.csv'
op_atoxic_f2 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/atoxic_f2.csv'
op_atoxic_f3 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/atoxic_f3.csv'
op_atoxic_f4 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/atoxic_f4.csv'
op_atoxic_f5 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/atchley/atoxic_f5.csv'

# FUNCTIONS START
# -----------------------------------------------------------------------------
def split_seq(sequence):
  return [char for char in sequence]

# create empty col
def create_column(df, col_name, value):
  df[col_name] = value

# iterate values and turn into array
def dict_vals_to_array(dictionary):
  for key1, val1 in dictionary.items():
    values = []
    for val2 in val1.values():
      values.append(float(val2))
    dictionary[key1] = values

# function that swaps letters for atchley array
def assign_atchley(df, column, empty_val, dictionary):
  for seq_dict in df[column]:
    for letter_key, val_array in seq_dict.items():
      if dictionary.get(letter_key) == None:
        val_array = [empty_val]*5
      else:
        val_array = dictionary[letter_key]
      seq_dict[letter_key] = val_array

df_atchley = pd.read_csv(ip_atchley, index_col=0, encoding='utf-8')
df_atchley.rename(columns={'amino.acid': 'amino_acid'}, inplace=True)
df_atchley.set_index('amino_acid', inplace=True)
for col in df_atchley['f1': 'f5']:
  df_atchley[col] = df_atchley[col].apply(lambda x: re.sub(r'[^\x00-\x7F]+','-', x)).astype(float)
df_atchley

# converting atchley factors to dict
dict_atchley = df_atchley.to_dict('index')
print([type(k) for k in dict_atchley.keys()])
print([type(k) for k in dict_atchley.values()])
print([type(k) for k in dict_atchley.values()])

dict_vals_to_array(dict_atchley)
dict_atchley

# loading training data
df_train_toxic = pd.read_csv(ip_train_toxic, index_col=0)
df_train_atoxic = pd.read_csv(ip_train_atoxic, index_col=0)

# print test
print(df_train_toxic.head())
print(df_train_atoxic.head())

"""# **Toxic Data**


---
"""

# describing toxic
print(df_train_toxic.describe().T[['mean', 'std', 'max','min', '25%', '75%']])
print('\n')
print('Total toxic training sequences: ', len(df_train_toxic))

# data distribution
d1_dims = (20, 14)
sns.set(style='whitegrid')
fig_d1 = plt.subplots(figsize=d1_dims)
d1=np.asarray(df_train_toxic[['sequence_length']].values.tolist()).ravel()
ax_d1 = sns.distplot(df_train_toxic['sequence_length'],
                     bins=62, kde=True,
                     kde_kws={"color": "k", "lw": 2, "label": "KDE"},
                     color='seagreen')
ax_d1.set_title('Distribution of toxic protein sequences lengths', fontsize=30)
ax_d1.set_xlabel('Sequence Length', fontsize=16)
ax_d1.set_ylabel('Proportion', fontsize=16)

"""**Single Sequence Testing**"""

# test single sequence
df_single_seq_test = 'ACDGNXPUCC'
df_single_list_test = split_seq(df_single_seq_test)

# print test
print(len(df_single_seq_test))
print(df_single_list_test)
print(len(df_single_list_test))
print(df_single_list_test[5])
print(df_single_list_test.index('C'))

# returns a single atchley feature as list
def get_single_feature_list(letter_list, feature_idx, atchley_dict, empty_val):
  feature_list = []
  for letter in letter_list:
    if atchley_dict.get(letter) == None:
      if empty_val == None:
        feature_list.append(None)
      else:
        feature_list.append(float(empty_val))
    else:
      feature_list.append(atchley_dict[letter][feature_idx])
  return feature_list

# returns a dictionary of lists of all atchley features
def get_atchley_features_dict(letter_list, atchley_dict, empty_val):
  dict_keys = ['f1', 'f2', 'f3', 'f4', 'f5']
  feature_dict = dict.fromkeys(dict_keys)
  for idx, (key, value) in enumerate(feature_dict.items()):
    feature_dict[key] = get_single_feature_list(letter_list, idx, atchley_dict, empty_val)
  return feature_dict

# feature_list = get_single_feature_list(df_single_list_test, dict_atchley)
feature_dict = get_atchley_features_dict(df_single_list_test, dict_atchley, 0)

single_feature_list = get_single_feature_list(df_single_list_test, 0, dict_atchley, 0)
print(feature_dict)
print(len(feature_dict))
print(single_feature_list)

# get change in values
def get_single_list_change(letter_list, empty_val):
  letter_list.insert(0, 0)
  return np.diff(letter_list)
  # return (j-i for i, j in zip(letter_list[:-1], letter_list[1:]))

new_list = get_single_list_change(single_feature_list, 0)
print(new_list)

# # single sequence test for minusing
# def dict_diff(seq_dict, empty_type):
#   new_dict = OrderedDict()
#   for idx, (key, value) in enumerate(seq_dict.items()):
#     np_value = np.array(value)

#     if idx == 0:
#       new_dict[key+str(idx)] = np.array(value) - np.array([0]*5)

#     else:
#       if np_value.all() == np.array([0]*5).all():
#         new_dict[key+list(seq_dict.keys())[idx-1]] = np.array([empty_type]*5)

#       elif np.array(list(seq_dict.values())[idx-1]).all() == np.array([0]*5).all():
#         new_dict[key+list(seq_dict.keys())[idx-1]] = np.array([empty_type]*5)

#       else:
#         new_dict[key+list(seq_dict.keys())[idx-1]] = np_value - np.array(list(seq_dict.values())[idx-1])

#   return new_dict

"""**Mini df testing**"""

# mini df for testing
df_train_toxic_test = df_train_toxic.head(10).copy()
df_train_toxic_test['sequence'] = df_train_toxic_test['sequence'].apply(lambda x: split_seq(x))
df_train_toxic_test

# function to get all dictionary of lists of atchley features
def get_all_atchley_dicts(df, seq_col, new_col, ref_dict, empty_val):
  df[new_col] = 0
  df[new_col] = df[new_col].astype('object')
  for idx, row in df.iterrows():
    df.at[idx, new_col] = get_atchley_features_dict(df.at[idx, seq_col], ref_dict, empty_val)

get_all_atchley_dicts(df_train_toxic_test, 'sequence', 'atchley_dict_lists', dict_atchley, 0)

df_train_toxic_test

def get_all_atchley_dicts_diff():

# plot

# def atchley_diff(df, seq_column, empty_type, new_col):
#   df[new_col] = df[new_col].astype('object')
#   for idx, row in df.iterrows():
#     df.at[idx, new_col] = dict_diff(df.at[idx, seq_column], empty_type)

# atchley_diff(df_train_toxic_test_zero, 'sequence', None, 'atchley_diff')
# df_train_toxic_test_zero
# test_dict = dict(df_train_toxic_test_zero['atchley_diff'].head(1))

# print(test_dict)

"""# **Real**

---
"""

# fill list using atchley tables
df_train_toxic_test['sequence'] = df_train_toxic_test['sequence'].apply()

# converting toxic sequences into list
df_train_toxic['sequence'] = df_train_toxic['sequence'].apply(lambda x: split_seq(x))
df_train_toxic



"""Converting Toxic to Atchley

f1 - Polarity
"""

#

"""# **Atoxic Data**

---
"""

# describing atoxic
print(df_train_atoxic.describe().T[['mean', 'std', 'max','min', '25%', '75%']])
print('\n')
print('Total atoxic training sequences: ', len(df_train_atoxic))

d2_dims = (20, 14)
sns.set(style='whitegrid')
fig_d2 = plt.subplots(figsize=d2_dims)
d2 = np.asarray(df_train_atoxic[['sequence_length']].values.tolist()).ravel()
ax_d2 = sns.distplot(df_train_atoxic['sequence_length'],
                     bins=100, kde=True,
                     kde_kws={"color": "k", "lw": 2, "label": "KDE"},
                     color='seagreen')
ax_d1.set_title('Distribution of atoxic protein sequences lengths', fontsize=30)
ax_d1.set_xlabel('Sequence Length', fontsize=16)
ax_d1.set_ylabel('Proportion', fontsize=16)