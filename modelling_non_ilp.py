# -*- coding: utf-8 -*-
"""modelling_non_ilp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N__8ETP65fvrMjPU9ykZ_orh--jRZPPK

## **Modelling**

---

**Repos**

TOXIFY: https://github.com/tijeco/toxify

ToxClassifier: https://github.com/rgacesa/ToxClassifier
"""

import io
import itertools as ite
import numpy as np
import pandas as pd
import pickle
import os.path
import random
import sklearn
import statistics

from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier

random_seed = 273
random.seed(random_seed)

# FILEPATHS
# -----------------------------------------------------------------------------
# INPUT files

# k-fold cross validation dictionaries
op_5_fold_p10 = '/content/drive/My Drive/UoS/Year3/COM3001/Data/CrossVal/5_fold_p10.pickle'
op_5_fold_p15 = '/content/drive/My Drive/UoS/Year3/COM3001/Data/CrossVal/5_fold_p15.pickle'
op_5_fold_p20 = '/content/drive/My Drive/UoS/Year3/COM3001/Data/CrossVal/5_fold_p20.pickle'

op_10_fold_p10 = '/content/drive/My Drive/UoS/Year3/COM3001/Data/CrossVal/10_fold_p10.pickle'
op_10_fold_p15 = '/content/drive/My Drive/UoS/Year3/COM3001/Data/CrossVal/10_fold_p15.pickle'
op_10_fold_p20 = '/content/drive/My Drive/UoS/Year3/COM3001/Data/CrossVal/10_fold_p20.pickle'

op_15_fold_p10 = '/content/drive/My Drive/UoS/Year3/COM3001/Data/CrossVal/15_fold_p10.pickle'
op_15_fold_p15 = '/content/drive/My Drive/UoS/Year3/COM3001/Data/CrossVal/15_fold_p15.pickle'
op_15_fold_p20 = '/content/drive/My Drive/UoS/Year3/COM3001/Data/CrossVal/15_fold_p20.pickle'

op_20_fold_p10 = '/content/drive/My Drive/UoS/Year3/COM3001/Data/CrossVal/20_fold_p10.pickle'
op_20_fold_p15 = '/content/drive/My Drive/UoS/Year3/COM3001/Data/CrossVal/20_fold_p15.pickle'
op_20_fold_p20 = '/content/drive/My Drive/UoS/Year3/COM3001/Data/CrossVal/20_fold_p20.pickle'

# models
op_m_linear_sgd = '/content/drive/My Drive/UoS/Year3/COM3001/Results/models/m_linear_sgd.pickle'
op_m_random_forest = '/content/drive/My Drive/UoS/Year3/COM3001/Results/models/m_random_forest.pickle'
op_m_decision_tree = '/content/drive/My Drive/UoS/Year3/COM3001/Results/models/m_decision_tree.pickle'


# FUNCTIONS START
# -----------------------------------------------------------------------------

# for writing and reading data to/from a binary file
def pickle_method(fname, method, context):
    if method == 'wb':
        return pickle.dump(context, open(fname, method))
    elif method == 'rb':
        return pickle.load(open(fname, method))


# fit model to data
def fit_model_to_folds(model, k_folds_dict):
    scores = []
    i = 1
    for fold in k_folds_dict:
        fitted_model = model.fit(k_folds_dict[fold][0], k_folds_dict[fold][2])
        score = accuracy_score(k_folds_dict[fold][3], fitted_model.predict(k_folds_dict[fold][1]))
        print('{} of k-fold {}'.format(fold, len(k_folds_dict)), ' --> ROC AUC score:', score)
        scores.append(score)
        i += 1

    mean_score = statistics.mean(scores)
    print("\nMean model score: %.3f" % mean_score)
    return mean_score


# run model, save results to dictionary
def run_model(model, k_folds_dicts, filename):
    model_results = {}
    for key, value in k_folds_dicts.items():
        print('\nCV:', key)
        model_results[key] = fit_model_to_folds(model, value)
    pickle_method(filename, 'wb', model_results)
    return model_results


# run all models, save results to a dictionary of dictionaries
def run_all_models(models, k_fold_dicts):
    models_dict = {}
    for model in models:
        print('\nModel:', model)
        models_dict[model] = run_model(model)
    return models_dict


# loading k-fold files
k_fold_dicts = {'fold_5_10p': pickle_method(op_5_fold_p10, 'rb', ''),
                'fold_5_15p': pickle_method(op_5_fold_p15, 'rb', ''),
                'fold_5_20p': pickle_method(op_5_fold_p20, 'rb', ''),
                'fold_10_10p': pickle_method(op_10_fold_p10, 'rb', ''),
                'fold_10_15p': pickle_method(op_10_fold_p15, 'rb', ''),
                'fold_10_20p': pickle_method(op_10_fold_p20, 'rb', ''),
                'fold_15_10p': pickle_method(op_15_fold_p10, 'rb', ''),
                'fold_15_15p': pickle_method(op_15_fold_p15, 'rb', ''),
                'fold_15_20p': pickle_method(op_15_fold_p20, 'rb', ''),
                'fold_20_10p': pickle_method(op_20_fold_p10, 'rb', ''),
                'fold_20_15p': pickle_method(op_20_fold_p15, 'rb', ''),
                'fold_20_20p': pickle_method(op_20_fold_p20, 'rb', '')}

print(len(k_fold_dicts.get('fold_20_20p')))

"""# **Models**"""

# model linear sgd classifier: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDClassifier.html
m_linear_sgd = SGDClassifier(loss='modified_huber', random_state=random_seed)
m_linear_sgd_dict = run_model(m_linear_sgd, k_fold_dicts, op_m_linear_sgd)

# model random forest: https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html
m_rfc = RandomForestClassifier(random_state=random_seed)
m_rfc_dict = run_model(m_rfc, k_fold_dicts, op_m_random_forest)

# model decision tree: https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html

m_dt = DecisionTreeClassifier(random_state=random_seed)
m_dt_dict = run_model(m_dt, k_fold_dicts, op_m_decision_tree)

"""# **Running all models**"""

# models list
models = [m_linear_sgd, m_rfc]

# running all models
models_dict = run_models(models, k_fold_dicts)