# -*- coding: utf-8 -*-
"""combo_generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mS6iZ4_OX6dJx7yV_bETma9dO99KXUGA
"""

# -----------------------------------------------------------------------------
# IMPORTS

import csv
import io
import itertools as ite
import matplotlib.pyplot as plt
import numpy as np
import os.path
import pandas as pd
import re
import seaborn as sns

from textwrap import wrap

# -----------------------------------------------------------------------------
# DRIVE MOUNTING

from google.colab import drive
drive.mount('/content/drive')

# FILEPATHS
# -----------------------------------------------------------------------------
# INPUT files

# helper files
amino_acid_codes_raw_path = '/content/drive/My Drive/UoS/Year3/COM3001/Data/amino_acid_codes.csv'
inpath_atchley = '/content/drive/My Drive/UoS/Year3/COM3001/Data/atchley.txt'

# data files
inpath_train_toxic = '/content/drive/My Drive/UoS/Year3/COM3001/Data/dataframes/train_toxic.csv'
inpath_train_atoxic = '/content/drive/My Drive/UoS/Year3/COM3001/Data/dataframes/train_atoxic.csv'

# -----------------------------------------------------------------------------
# OUTPUT files

# helper files
outpath_atchley_csv = '/content/drive/My Drive/UoS/Year3/COM3001/Data/atchley.csv'

# one combo
outpath_one_combo_part1 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/combos/one_combo_part1.csv'
outpath_one_combo_complete = '/content/drive/My Drive/UoS/Year3/COM3001/Results/combos/one_combo_complete.csv'

# 2 combo versions
outpath_two_combo_csv = '/content/drive/My Drive/UoS/Year3/COM3001/Results/combos/two_combo_empty.csv'
outpath_two_combo_part1 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/combos/two_combo_part1.csv'
outpath_two_combo_complete = '/content/drive/My Drive/UoS/Year3/COM3001/Results/combos/two_combo_complete.csv'
outpath_two_combo_complete_prop = '/content/drive/My Drive/UoS/Year3/COM3001/Results/combos/two_combo_complete_prop.csv'

# squares
outpath_two_combo_sqr_empty = '/content/drive/My Drive/UoS/Year3/COM3001/Results/combos/two_combo_sqr_empty.csv'

outpath_two_combo_sqr_toxic_raw = '/content/drive/My Drive/UoS/Year3/COM3001/Results/combos/two_combo_sqr_toxic_raw.csv'
outpath_two_combo_sqr_toxic_prop = '/content/drive/My Drive/UoS/Year3/COM3001/Results/combos/two_combo_sqr_toxic_prop.csv'

outpath_two_combo_sqr_atoxic_raw = '/content/drive/My Drive/UoS/Year3/COM3001/Results/combos/two_combo_sqr_atoxic_raw.csv'
outpath_two_combo_sqr_atoxic_prop = '/content/drive/My Drive/UoS/Year3/COM3001/Results/combos/two_combo_sqr_atoxic_prop.csv'


# 3 combo
outpath_three_combo_csv = '/content/drive/My Drive/UoS/Year3/COM3001/Results/combos/three_combo_empty.csv'
outpath_three_combo_part1 = '/content/drive/My Drive/UoS/Year3/COM3001/Results/combos/three_combo_part1.csv'
outpath_three_combo_complete = '/content/drive/My Drive/UoS/Year3/COM3001/Results/combos/three_combo_complete.csv'

# COMBO FUNCTIONS START
# -----------------------------------------------------------------------------

# checking values
single_codes_total = 24
two_combo_total = 24*24
three_combo_total = 24*24*24

# -----------------------------------------------------------------------------
# FUNCTIONS

# save df to .csv file
def df_to_csv(df, outpath, sep):
  return df.to_csv(outpath, sep, encoding='utf-8')

# saves a list to csv file
def combo_list_to_csv(combo_list, filepath):
  with open(filepath, 'w') as outfile:
    for entries in combo_list:
      outfile.write(entries)
      outfile.write('\n')

# get number of combos in a string
def count_single(combo, sequence):
  return sequence.count(str(combo))

# updates dataframe with combo counts for all sequences
def account_combos(df, sequence_list, combo_col, result_col):
  for sequence in sequence_list:
    for idx, row in df.iterrows():
      df.loc[idx, result_col] += int(count_single(df.loc[idx, combo_col], str(sequence)))

# fill in 2 combo square dataframe with values from list
def fill_two_combo_square(df, combo_list):
  total = 0
  col_idx = 0
  while col_idx < single_codes_total: # column ite
    row_idx = 0
    while row_idx < single_codes_total: # row ite
      df.loc[row_idx, df.columns[col_idx+1]] = int(combo_list[total])
      row_idx += 1
      total +=1
    col_idx += 1
  return df

# -----------------------------------------------------------------------------
# COMBO FUNCTIONS END
# -----------------------------------------------------------------------------

"""# **Helping data**"""

df_amino_codes = pd.read_csv(amino_acid_codes_raw_path)
df_amino_codes

# single code list and string variables
df_amino_codes['single_code'] = df_amino_codes['single_code'].astype(str)
single_code_list = df_amino_codes['single_code'].tolist()
single_code_str = ''.join(single_code_list)

# print tests
print(single_code_list)
print(single_code_str)
print(len(single_code_str))

"""# **Atchely factors**

---
"""

# # reading .txt file to dataframe
# df_atchley = pd.read_csv(inpath_atchley, sep='\s+')
# df_atchley

# # saving dataframe to csv
# df_to_csv(df_atchley, outpath_atchley_csv, ',')

# opening back data from csv
df_atchley = pd.read_csv(outpath_atchley_csv, index_col=0)
df_atchley.rename(columns={'amino.acid': 'amino_acid'}, inplace=True)
df_atchley

"""# **Main dataset Loading**


---
"""

# loading csv datatasets to dfs

df_train_toxic = pd.read_csv(inpath_train_toxic, index_col=0)
df_train_atoxic = pd.read_csv(inpath_train_atoxic, index_col=0)

# converting df sequence colums to lists
train_toxic_list = df_train_toxic['sequence'].tolist()
train_atoxic_list = df_train_atoxic['sequence'].tolist()

# print test
print(len(train_toxic_list))
print(len(train_atoxic_list))

"""# **One Combo**
---

Analysing single instances of amino acid sequences
"""

# # Analysing single is
# df_one_combo = df_amino_codes[['single_code']].copy()
# df_one_combo.rename(columns={'single_code': '1combo'}, inplace=True)
# df_one_combo['toxic_count'] = 0
# df_one_combo['atoxic_count'] = 0
# df_one_combo

# # Accouting one_combo for toxic
# account_combos(df_one_combo, train_toxic_list, '1combo', 'toxic_count')

# # saving one_combo part 1 to csv
# df_to_csv(df_one_combo, outpath_one_combo_part1, ',')

# # Accouting one_combo for atoxic
# account_combos(df_one_combo, train_atoxic_list, '1combo', 'atoxic_count')

# # saving one_combo part 1 to csv
# df_to_csv(df_one_combo, outpath_one_combo_complete, ',')

# loading back one_combo complete from csv to df
df_one_combo = pd.read_csv(outpath_one_combo_complete, index_col=0)
df_one_combo

# sum one combo variables
toxic_one_combo_sum = df_one_combo['toxic_count'].sum()
atoxic_one_combo_sum = df_one_combo['atoxic_count'].sum()

# print test
print(toxic_one_combo_sum)
print(atoxic_one_combo_sum)

# adding proportions to one combo table
df_one_combo['toxic_percent'] = df_one_combo['toxic_count'].apply(lambda x: (x/toxic_one_combo_sum)*100)
df_one_combo['atoxic_percent'] = df_one_combo['atoxic_count'].apply(lambda x: (x/atoxic_one_combo_sum)*100)
df_one_combo

# checking one_combo proportions add up
print(df_one_combo['toxic_percent'].sum())
print(df_one_combo['atoxic_percent'].sum())

# # calculating difference for one_combo
# # calculating absolute difference for one_combo
# df_one_combo['diff_tox_sub_atox'] = (df_one_combo['toxic_percent'] - df_one_combo['atoxic_percent'])
# df_one_combo

# # calculating absolute difference for one_combo
# df_one_combo['abs_diff'] = (df_one_combo['diff_tox_sub_atox']).abs()
# df_one_combo

# # re-saving df to csv
# df_to_csv(df_one_combo, outpath_one_combo_complete, ',')

# loading csv to df again
df_one_combo = pd.read_csv(outpath_one_combo_complete, index_col=0)
df_one_combo

# plotting bar chart
bar1_dims = (20, 16)
sns.set(style='whitegrid')
fig_bar1 = plt.subplots(figsize=bar1_dims)
ax_bar1 = sns.barplot(x=df_one_combo['1combo'], y=df_one_combo['diff_tox_sub_atox'], palette='Blues_d')
ax_bar1.set_title('\n'.join(wrap('Percentage difference between average amino acids compositions in protein sequences - (toxic subtracted atoxic)')),
                  fontsize=30)
ax_bar1.set_xlabel('Amino acid', fontsize=18)
ax_bar1.set_ylabel('% difference', fontsize=18)

df_one_combo.describe().T[['mean', 'std', 'max','min', '25%', '50%', '75%']]

"""# **Two Combo**

---
"""

# Creating two_combo list
two_combos_list = [''.join(p) for p in ite.product(single_code_str, repeat=2)]
two_combos_string = ''.join(two_combos_list)

# print test
print(two_combos_list)
print(len(two_combos_list))
print(two_combos_string)
print(len(two_combos_string))

# # creating two_combo_dataframe
# df_two_combo = pd.DataFrame(two_combos_list, columns=['2_combo'])
# df_two_combo

# # saving df_two_combo as csv
# df_to_csv(df_two_combo, outpath_two_combo_csv, ',')

# # opening raw two_combo csv to df
# df_two_combo_empty = pd.read_csv(outpath_two_combo_csv, index_col=0)
# df_two_combo_empty.set_index('2_combo', inplace=True)
# df_two_combo_empty

# loading part 1 df
df_two_combo = pd.read_csv(outpath_two_combo_part1, index_col=0)
df_two_combo

# # accounting combos for part 2 atoxic to complete table
# account_combos(df_two_combo, train_atoxic_list, '2_combo', 'atoxic_count')

# # saving atoxic data to complte
# df_to_csv(df_two_combo, outpath_two_combo_complete, ',')

# loading in csv back
df_two_combo = pd.read_csv(outpath_two_combo_complete, index_col=0)
df_two_combo

# # adding proportions
# df_two_combo['toxic_count_prop'] = df_two_combo['toxic_count'].apply(lambda x: (x/toxic_combo_sum)*100)
# df_two_combo['atoxic_count_prop'] = df_two_combo['atoxic_count'].apply(lambda x: (x/atoxic_combo_sum)*100)
# df_two_combo

# # saving proportion table to csv
# df_to_csv(df_two_combo, outpath_two_combo_complete_prop, ',')

# loading dataset back up
df_two_combo = pd.read_csv(outpath_two_combo_complete_prop, index_col=0)
df_two_combo

# sum variables
toxic_combo_sum = df_two_combo['toxic_count'].sum()
atoxic_combo_sum = df_two_combo['atoxic_count'].sum()

# print test
print(toxic_combo_sum)
print(atoxic_combo_sum)

print(df_two_combo['toxic_count_prop'].sum())
print(df_two_combo['atoxic_count_prop'].sum())

# calculating differenes of 2_combo
df_two_combo['diff_tox_sub_atox'] = (df_two_combo['toxic_count_prop'] - df_two_combo['atoxic_count_prop'])
df_two_combo['abs_diff'] = (df_two_combo['diff_tox_sub_atox']).abs()
df_two_combo

# # saving two_combo with abs diff to csv
# df_to_csv(df_two_combo, outpath_two_combo_complete, ',')

df_two_combo = pd.read_csv(outpath_two_combo_complete, index_col=0)
df_two_combo

df_two_combo.describe().T[['mean', 'std', 'max','min', '25%', '50%', '75%']]

# creating list variables
two_combo_toxic_list = df_two_combo['toxic_count'].tolist()
two_combo_atoxic_list = df_two_combo['atoxic_count'].tolist()
two_combo_polar_diff_list = df_two_combo['diff_tox_sub_atox'].tolist()
two_combo_abs_diff_list = df_two_combo['abs_diff'].tolist()

# print test
print(len(two_combo_toxic_list))
print(len(two_combo_atoxic_list))
print(two_combo_polar_diff_list[:10])
print(len(two_combo_abs_diff_list))

"""**2 Combo Square**"""

# df_two_combo_sqr = pd.DataFrame(single_code_list, columns=['letter'])
# df_two_combo_sqr = df_two_combo_sqr.assign(**{k: 0 for k in single_code_list })
# df_two_combo_sqr

# # saving two combo sqr to csv
# df_to_csv(df_two_combo_sqr, outpath_two_combo_sqr_empty, ',')

# uploading two combo square from csv
df_two_combo_sqr = pd.read_csv(outpath_two_combo_sqr_empty, index_col=0)
df_two_combo_sqr

"""**Toxic 2 combo square**"""

# # toxic two_combo square filling in
# df_two_combo_sqr_toxic_raw = fill_two_combo_square(df_two_combo_sqr, two_combo_toxic_list)

# # print test
# df_two_combo_sqr_toxic_raw

# # saving 2 combo square raw to csv
# df_to_csv(df_two_combo_sqr_toxic_raw, outpath_two_combo_sqr_toxic_raw, ',')

# # loading 2 combo square raw back to df
# df_two_combo_sqr_toxic_raw = pd.read_csv(outpath_two_combo_sqr_toxic_raw, index_col=0)
# df_two_combo_sqr_toxic_raw.set_index('letter', inplace=True)
# # print test
# df_two_combo_sqr_toxic_raw

# # divide all items by total
# df_two_combo_sqr_toxic_prop = df_two_combo_sqr_toxic_raw.apply(lambda x: (x/toxic_combo_sum)*100)
# df_two_combo_sqr_toxic_prop

# # saving prop table to csv
# df_to_csv(df_two_combo_sqr_toxic_prop, outpath_two_combo_sqr_toxic_prop, ',')

# loading in df from cvs
df_two_combo_sqr_toxic_prop = pd.read_csv(outpath_two_combo_sqr_toxic_prop, index_col=0)
df_two_combo_sqr_toxic_prop

"""**Atoxic 2 combo square**"""

# # atoxic two_combo square filling in
# df_two_combo_sqr_atoxic_raw = fill_two_combo_square(df_two_combo_sqr, two_combo_atoxic_list)

# # print test
# df_two_combo_sqr_atoxic_raw

# # saving 2 combo square raw to csv
# df_to_csv(df_two_combo_sqr_atoxic_raw, outpath_two_combo_sqr_atoxic_raw, ',')

# # reading raw atoxic back to csv
# df_two_combo_sqr_atoxic_raw = pd.read_csv(outpath_two_combo_sqr_atoxic_raw, index_col=0)
# df_two_combo_sqr_atoxic_raw.set_index('letter', inplace=True)
# df_two_combo_sqr_atoxic_raw

# # divide all items by total
# df_two_combo_sqr_atoxic_prop = df_two_combo_sqr_atoxic_raw.apply(lambda x: (x/atoxic_combo_sum)*100)
# df_two_combo_sqr_atoxic_prop

# # save atoxic prop to csv
# df_to_csv(df_two_combo_sqr_atoxic_prop, outpath_two_combo_sqr_atoxic_prop, ',')

df_two_combo_sqr_atoxic_prop = pd.read_csv(outpath_two_combo_sqr_atoxic_prop, index_col=0)
df_two_combo_sqr_atoxic_prop

"""**2 Combo Difference Squares**

Polar:
"""

df_two_combo_sqr_abs_polar = fill_two_combo_square(df_two_combo_sqr, two_combo_abs_diff_list)

# print test
df_two_combo_sqr_abs_polar

"""# **Graphs**


**Toxic**
"""

fig_tox, ax_tox = plt.subplots(figsize=(10, 8))
cmap_tox = sns.light_palette('seagreen', as_cmap=True)
two_combo_toxic_cmap = sns.heatmap(df_two_combo_sqr_toxic_prop, cmap=cmap_tox, ax=ax_tox).invert_yaxis()

# for tick_label in two_combo_prop_cmap.ax_prop.axes.get_yticklabels():
#   tick_text = tick_label.get_text()
#   tick_label.set_color('white')

two_combo_toxic_cmap

"""Atoxic heatmap"""

fig_atox, ax_atox = plt.subplots(figsize=(10, 8))
cmap_atox = sns.light_palette('seagreen', as_cmap=True)
two_combo_atoxic_cmap = sns.heatmap(df_two_combo_sqr_atoxic_prop, cmap=cmap_atox, ax=ax_atox).invert_yaxis()

# for tick_label in two_combo_prop_cmap.ax_prop.axes.get_yticklabels():
#   tick_text = tick_label.get_text()
#   tick_label.set_color('white')

two_combo_atoxic_cmap

"""# **3 Combo**


---
"""

# # # Creating three_combo list
# three_combos_list = [''.join(p) for p in ite.product(single_code_str, repeat=3)]
# three_combos_string = ''.join(three_combos_list)

# # print test
# print(three_combos_list)
# print(len(three_combos_list))
# print(three_combos_string)
# print(len(three_combos_string))

# # creating three_combo_dataframe
# df_three_combo = pd.DataFrame(three_combos_list, columns=['3_combo'])

# df_three_combo

# # saving df_two_combo as csv
# df_to_csv(df_three_combo, outpath_three_combo_csv, ',')

# opening raw three_combo csv to df
df_three_combo = pd.read_csv(outpath_three_combo_csv, index_col=0)
df_three_combo

"""# Bookends


---
"""

